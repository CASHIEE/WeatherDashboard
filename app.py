# -*- coding: utf-8 -*-
"""Weather Analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17hGwJNoQJ5_ZXucDcZ-ebLJTrK9tonDb
"""

# Install PySpark, plotting libraries
!apt-get install openjdk-11-jdk -y
!pip install pyspark pandas matplotlib seaborn plotly

import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-11-openjdk-amd64"
os.environ["SPARK_HOME"] = "/usr/local/lib/python3.10/dist-packages/pyspark"

from pyspark.sql import SparkSession
from pyspark.sql.functions import col, dayofweek, month, hour, weekofyear

spark = SparkSession.builder.appName("WeatherAnalytics").getOrCreate()

# Load CSV
df = spark.read.csv("weather_data.csv", header=True, inferSchema=True)

# Convert date_time to timestamp
df = df.withColumn("date_time", col("date_time").cast("timestamp"))

# Add features
df = df.withColumn("day", dayofweek(col("date_time"))) \
       .withColumn("month", month(col("date_time"))) \
       .withColumn("hour", hour(col("date_time"))) \
       .withColumn("week", weekofyear(col("date_time")))

df.show(5)

# Average metrics
avg_metrics = df.groupBy("Location").avg("Temperature_C","Humidity_pct","Precipitation_mm","Wind_Speed_kmh")
avg_metrics.show()

# Example thresholds
temp_threshold = 35       # Celsius
precip_threshold = 50     # mm
wind_threshold = 80       # km/h

extreme_events = df.filter(
    (col("Temperature_C") > temp_threshold) |
    (col("Precipitation_mm") > precip_threshold) |
    (col("Wind_Speed_kmh") > wind_threshold)
)

extreme_events.show()

import pandas as pd

# Convert to Pandas for correlation
pandas_df = df.toPandas()

# Compute correlation
corr_matrix = pandas_df[['Temperature_C','Humidity_pct','Precipitation_mm','Wind_Speed_kmh']].corr()
print("Correlation matrix:")
print(corr_matrix)

import matplotlib.pyplot as plt
import seaborn as sns

# Monthly avg temperature per location
monthly_avg = pandas_df.groupby(['Location','month'])['Temperature_C'].mean().reset_index()

plt.figure(figsize=(12,5))
sns.lineplot(data=monthly_avg, x='month', y='Temperature_C', hue='Location', marker='o')
plt.title("Monthly Average Temperature per Location")
plt.show()

# Weekly precipitation trend
weekly_precip = pandas_df.groupby(['Location','week'])['Precipitation_mm'].sum().reset_index()

plt.figure(figsize=(12,5))
sns.lineplot(data=weekly_precip, x='week', y='Precipitation_mm', hue='Location', marker='o')
plt.title("Weekly Precipitation Trend per Location")
plt.show()

import plotly.express as px

# Temperature vs Humidity scatter
fig = px.scatter(pandas_df, x="Temperature_C", y="Humidity_pct", color="Location",
                 title="Temperature vs Humidity", hover_data=['date_time'])
fig.show()

# Wind Speed distribution
fig2 = px.box(pandas_df, x='Location', y='Wind_Speed_kmh', color='Location',
              title="Wind Speed Distribution per Location")
fig2.show()

!npm install -g localtunnel

# Run Streamlit app in the background
!streamlit run app.py &

# Expose the port 8501 via LocalTunnel
!npx localtunnel --port 8501